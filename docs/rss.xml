<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>周仕磊的博客</title><link>https://blackcatontree.github.io/zhoushilei.github.io</link><description>整理自己编程中遇到的问题</description><copyright>周仕磊的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/114755056?v=4</url><title>avatar</title><link>https://blackcatontree.github.io/zhoushilei.github.io</link></image><lastBuildDate>Thu, 30 Oct 2025 09:13:08 +0000</lastBuildDate><managingEditor>周仕磊的博客</managingEditor><ttl>60</ttl><webMaster>周仕磊的博客</webMaster><item><title>20251029 新开发机构建</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251029%20-xin-kai-fa-ji-gou-jian.html</link><description>vscode 网页版本
```shell
conda create -n drugclip python=3.9 -y
conda install pytorch==2.0.0 torchvision==0.15.0 torchaudio==2.0.0 pytorch-cuda=11.8 -c pytorch -c nvidia -y
```
配置清华源
```shell
conda config --remove-key channels
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
conda config --set show_channel_urls yes
```
torch 安装
```shell
pip install torch==2.0.0+cu118 torchvision==0.15.0+cu118 torchaudio==2.0.0+cu118 -f https://download.pytorch.org/whl/torch_stable.html -i https://pypi.tuna.tsinghua.edu.cn/simple
pip install /home/dataset-assist-0/tmp/zsl/Drugclip/DrugCLIP/unicore-0.0.1+cu118torch2.0.0-cp39-cp39-linux_x86_64.whl
```
```shell
pip install /home/dataset-assist-0/tmp/zsl/Drugclip/DrugCLIP/unicore-0.0.1+cu118torch2.0.0-cp39-cp39-linux_x86_64.whl
pip install  rdkit
pip install numpy pandas
pip install scikit-learn -i https://pypi.tuna.tsinghua.edu.cn/simple
# 在 drugclip 环境中安装
pip install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple
pip uninstall numpy -y
pip install numpy==1.24.3 -i https://pypi.tuna.tsinghua.edu.cn/simple
```
git设置
安装git graph 插件，(user's class)[https://blog.csdn.net/weixin_55783373/article/details/119571301]

左下角 展示git graph
点击下载按钮 可以下载最新 的远程分支数据
可以创建新的分支
上一步的前提是代码已经提交了或者签出
```shell
git config --global user.name zsl
git config --global user.email 'zhou1553731627@gmail.com'
#验证是否正确
git config --list

```
```text
come from 👍 
https://blog.csdn.net/weixin_55783373/article/details/119571301
```
。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251029%20-xin-kai-fa-ji-gou-jian.html</guid><pubDate>Wed, 29 Oct 2025 14:20:39 +0000</pubDate></item><item><title>20251029 drugclip</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251029%20drugclip.html</link><description>## 一、ligand数据库构建
### 1. 采用了split_sdf 进行分割处理
### 2. 数据库分子ID索引问题：
```python
# ... in getID function
for id_key in ['IDNUMBER','Catalog ID','ID']:
    try:
        return mol.GetProp(id_key)
    except:
        pass
raise ValueError('No ID found in molecule')
```
```python
def getID(mol):
    # 最终的 ID 键搜索列表，Catalog_ID 是最高优先级
    for id_key in ['Catalog_ID', 'ZID', 'Compound_ID', 'ENAMINE_ID', 'IDNUMBER', 'Catalog ID', 'ID', 'NSC']: 
        try:
            # 找到正确的 ID 键并返回
            return mol.GetProp(id_key)
        except:
            pass
    
    # 如果所有键都失败，则抛出错误
    raise ValueError('No ID found in molecule')
```
### 3.特殊的原子进行UFF 力场的MMFF优化时失败
```text
Se2+2 (4)、Pt+2 (1)、Ca+2 (0)、 S_6+6 (12)、Re5 (2)、Fe2+2 (0)、 Ce+3 (0)
```
主循环会在写入 LMDB 之前，自动过滤掉所有返回 None 的分子（即跳过这些无法处理的分子）
## 二、加载权重进行编码
### 1. 网盘下载pt权重
### 2. unicore 是自己定义的，找不到
[unicore](https://github.com/dptech-corp/Uni-Core)
```shell
git clone https://github.com/dptech-corp/Uni-Core.git
# 或者直接下载到本地然后上传，上传后解压
cd /home/dataset-assist-0/tmp/zsl/AIDD/
unzip main.zip
cd Uni-Core-main 
pip install -e ./ # 3. 安装 unicore 库（在 pytorch2.5.1 环境中）
```
### 3. positive_ligand 数据ID 直接用分子式

### 4. 直接调用开始做rank
#DrugCLIP 验证脚本分析

#### 脚本简介
`run_vs_validation.py` 是独立脚本，用于验证 `DrugCLIP` 模型在不同规模（1M、2M、4M）诱饵库上的虚拟筛选任务。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251029%20drugclip.html</guid><pubDate>Tue, 28 Oct 2025 19:01:50 +0000</pubDate></item><item><title>20251029 邓岳：院长有约</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251029%20-deng-yue-%EF%BC%9A-yuan-chang-you-yue.html</link><description>## 博士的三个阶段
1. 没有思路：快速的rush文章，然后懂这个方向应该怎么做
2. 有很多思路，并且大概率都可行，这个时候需要自己沉淀一下，思考应该做什么样子的文章
3. 有自己的科研品味

## 多读一些经典文献。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251029%20-deng-yue-%EF%BC%9A-yuan-chang-you-yue.html</guid><pubDate>Tue, 28 Oct 2025 18:18:49 +0000</pubDate></item><item><title>20251028 如何在开发机中使用jupyter notebook</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251028%20-ru-he-zai-kai-fa-ji-zhong-shi-yong-jupyter%20notebook.html</link><description>```shell
conda activate my_env
conda install ipykernel
python -m ipykernel install --user --name=pytorch2.5.1 --display-name pytorch251
```。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251028%20-ru-he-zai-kai-fa-ji-zhong-shi-yong-jupyter%20notebook.html</guid><pubDate>Tue, 28 Oct 2025 13:12:18 +0000</pubDate></item><item><title>20251028 如何快速构建一个环境用于baseline的构建</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251028%20-ru-he-kuai-su-gou-jian-yi-ge-huan-jing-yong-yu-baseline-de-gou-jian.html</link><description>1. 安装git
```shell
sudo apt update
sudo apt install git
```
2.git克隆项目
```shell
git clone https://github.com/bowen-gao/DrugCLIP.git
```
。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251028%20-ru-he-kuai-su-gou-jian-yi-ge-huan-jing-yong-yu-baseline-de-gou-jian.html</guid><pubDate>Tue, 28 Oct 2025 11:36:13 +0000</pubDate></item><item><title>20251028 ssh 配置vscode本地修改jupyter的开发机</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251028%20ssh%20-pei-zhi-vscode-ben-di-xiu-gai-jupyter-de-kai-fa-ji.html</link><description>## 文件同步，可以直接编写 
1.vscode安装ssh插件 remote-SSH

 ```shell
ssh # 检查是否安装了ssh

```
2.开发机创建ssh
开发机创建ssh ，名称随便填写
百度检索ip将ip地址设置为白名单，后面加上/24作为掩码
3. vscode创建密钥对
在cmd中输入

```
ssh-keygen
```
出现结果：

```
Generating public/private ed25519 key pair.
Enter file in which to save the key (C:\Users\Administrator/.ssh/id_ed25519):
```

4..进入这个文件ed25519.pub 文件中

```
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ7VQofGtnZi5ZJl9wF0Mx7p8Kms4WrYN0+8ttlCrCox administrator@DESKTOP-SL4G7T4
```
 
5. vscode里面进行配置

```
#~/.ssh/config
Host Ai-train-01
    HostName 106.63.100.63
    User batchcom
    Port 30060
    IdentityFile ~/.ssh/id_ed25519
```

6.直接点击vscode下面的 ssh就可以连接了
+ linux
+ yes

## 直接运行调用，弥补开发机无法直接运行缺点
1.点击File—&gt;Preferences—&gt;Settings，搜索Show Login Terminal，并勾选Always reveal the SSH login terminal
2. 运行命令
直接点击上方的 运行 按钮运行
```shell
Ctrl+Shift+P (Windows/Linux) 或 Cmd+Shift+P (Mac)
Python: Select Interpreter
```
cd到命令行采用下面的方式运行

```shell
python demo.py
```

## 运行jupyter notebook 文件
在vscode里面的terminal里面进行下面的操作

```shell
conda activate python2.5.1
pip install jupyter
conda install ipykernel
python -m ipykernel install --user --name python2.5.1 --display-name 'python251'

```
。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251028%20ssh%20-pei-zhi-vscode-ben-di-xiu-gai-jupyter-de-kai-fa-ji.html</guid><pubDate>Tue, 28 Oct 2025 07:36:28 +0000</pubDate></item><item><title>20251025 bash 文件的构建</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251025%20bash%20-wen-jian-de-gou-jian.html</link><description>## 基础操作
```shell
# 强制清除文件
rm -f name.txt # 强制清除文件
# 文本检索
ligand_charge=$(grep $pdbid /home/zsl/ligand.txt | awk '{print $2}') #|前检索出的行，|后输出第二列

# 批处理操作
cat batch.txt | parallel --env _ --joblog 02.log --retries 3 --jobs 16 process_pdbid {} #批处理操作（base txt 文档）
find '/home/tmp/zsl/data' -maxdepth 1 -type d -name 'GID*' | sort | while read dir; do
   pdbid=$(basename'$dir')
   echo '$pdbid'
done | parallel --joblog 02.log --retries 3 --jobs 16 01_ligand_process{} # 批处理操作（base find文件夹名称检索）

# 调用bash文件
cd /home/test
chmod +x 02_protein_process.sh #增加权限
./02_protein_process.sh #直接运行
```
## IF语句
``` shell
if [[ $? -eq 0]]; then
    gmx editconf -f ${pdbid}_protein.gro -o ${pdbid}_protein_H.pdb -nobackup &gt; /dev/null 2&gt;&amp;1 #gro 转化为pdb文件，现在已经去掉了H
    python $base_directory/02_protein_process/0202_addchain.py\
        --pdbfile ${pdbid}_protein_H.pdb \
        --pdbid $pdbid\
        --outdir $outdir #结束不需要反斜杠
else
    echo '${pdbid} pdb2gmx failed. Check pdb2gmx.out for details.'
    echo ${pdbid} &gt;&gt; $base_directory/02_protein_process/nonstandard_residue.txt
fi   
``` 
## function defination
```shell
02_protein_process() {
    # defination
    base_directory=$(pwd)#当前文件夹
    local pdbfile='${base_directory}/data/$pdbid/protein/${pdbid}_protein_0_fixed.pdb'
    
    # action
    mkdir -p $outdir
    cd $outdir
    
    # python
    python $base_directory/0201_dump_protein.py\
        --pdbfile $pdbfile\
        --ligandfile $ligandfile\
        --pdbid $pdbid\
        --outdir $outdir
}
# function 调用
export -f 02_protein_process #将函数导入到shell环境中
```
。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251025%20bash%20-wen-jian-de-gou-jian.html</guid><pubDate>Fri, 24 Oct 2025 19:16:47 +0000</pubDate></item><item><title>特异性靶点小分子药物筛选</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/te-yi-xing-ba-dian-xiao-fen-zi-yao-wu-shai-xuan.html</link><description>## 蛋白质口袋划分
选取口袋部分，6A ,8A ,
球形/正方形
ps. 一定按照文献中的数据进行

## 从数据库中下载mol2
400millions 的药物分子去和蛋白质口袋进行作用

## 筛选出TOP1K的数据
DrugClip 一种基于对比学习的蛋白质-分子表示学习框架，将虚拟筛选重构为密集检索任务，通过双编码器，
1. unimol的3d transformer 学习蛋白质口袋于分子的表示；
2. HomoAug生物数据增强（利用同源蛋白质生成新训练对）和rdkit构象模拟处理训练-测试不一致的问题，在
结果：
1. dud-e 和lit-pcba基准测试中，零样本设置下显著优于Glide-sp vina等传统对接方法

## 查看TOP100/20/50里面有没有我们的阳性分子
我们有pos阳性的分子 也有neg阴性的分子


注意：
1. 我们特征提取时可以将数据提取出来之后直接进行，不需要重复进行计算
2. 大规模的特征提取，可以采用faceholk的方式进行。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/te-yi-xing-ba-dian-xiao-fen-zi-yao-wu-shai-xuan.html</guid><pubDate>Fri, 24 Oct 2025 05:31:15 +0000</pubDate></item><item><title>python基础操作</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/python-ji-chu-cao-zuo.html</link><description>##  linux 下 python 版本和位置查看
- which python #查找系统中有那些python
- ls /usr/bin/python* # 列出所有的python文件
- ls /usr/bin/python* # 系统python版本查看
- conda --version # 查看conda的安装版本
- conda info # conda 的信息
- conda env list # 列出conda的所有env
- conda list python # 查看当前的python版本
- conda create -n aidd310 python=3.10

## linux 下conda创建新的环境
- ls -la /home/ # 检查用户主目录的权限
- conda create -p ./conda_envs/aidd310 python=3.10 # 当前文件夹创建conda_envs 存储一个aidd310 的env名称，指定python版本是310
- conda activate ./conda_envs/aidd310 # 激活aidd310
```shell
mkdir /home/dataset-assist-0/conda-env
mkdir /home/dataset-assist-0/conda-pkg
conda config --add envs_dirs /home/dataset-assist-0/conda-env/
conda config --add pkgs_dirs /home/dataset-assist-0/conda-pkg/
conda create -n myenv python=3.11
``` 
- conda deactivate # 退出当前环境
- rm -rf /home/dataset-assist-0/tmp/zsl/conda_envs/aidd310 文件夹中的环境
- conda create -p /home/dataset-assist-0/tmp/zsl/conda_envs/aidd310 python=3.10 -y 重新安装环境
- python --version # 查看当前python环境

## windows 上的pkg打包到linux
windows上导出pkg
- 脏的方式：conda env export &gt; environment.yml
- 干净的方式: conda env export --no-builds &gt; environment.yml
linux 上安装pkg
- conda activate aidd310 # 激活新的环境
- conda activate /home/dataset-assist-0/tmp/zsl/conda_envs/aidd310

```shell
# 添加清华镜像
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --set show_channel_urls yes

# 然后重新安装
conda install numpy=1.26.4 scipy pandas matplotlib -y
``` 
- pip install numpy==1.26.4 pandas matplotlib scipy
- pip install openbabel-wheel
- pip install pybel
- pip install rdkit==2025.9.1
- 
。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/python-ji-chu-cao-zuo.html</guid><pubDate>Fri, 24 Oct 2025 03:49:14 +0000</pubDate></item><item><title>windows命令行的操作方法</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/windows-ming-ling-xing-de-cao-zuo-fang-fa.html</link><description> Get-ChildItem -Directory | Select-Object Name | Out-File -FilePath folder_list.txt -Encoding UTF8 
将当前文件夹中的所有文件夹的名字复制到一个文件中，并且将其放置在该文件夹下 编码方式采用UTF8的方式。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/windows-ming-ling-xing-de-cao-zuo-fang-fa.html</guid><pubDate>Wed, 22 Oct 2025 15:39:22 +0000</pubDate></item><item><title>20251019 选导师</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251019%20-xuan-dao-shi.html</link><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251019%20-xuan-dao-shi.html</guid><pubDate>Sun, 19 Oct 2025 09:54:42 +0000</pubDate></item><item><title>20251018 蛋白质配体相互作用DFT计算部分</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251018%20-dan-bai-zhi-pei-ti-xiang-hu-zuo-yong-DFT-ji-suan-bu-fen.html</link><description>## 前期准备
1.gromacs安装

```shell
conda activate aidd310
sudo apt-get update #更新
sudo apt-get install gromacs #安装
```
2.xtb计算软件安装
```shell
conda install xtb -c conda-forge
```
安装完成之后
```shell
xtb --version
```

完成之后显示
```
Executing transaction: done                                                                                                                                                                                                             
(/home/dataset-assist-0/tmp/zsl/conda_envs/aidd310) batchcom@dev-env-n651q-ee82f9:/home/dataset-assist-0/tmp/zsl/6-test/data_change/gfnff/jobs/GID110022$ xtb --version
      -----------------------------------------------------------                                                                                                                                                                       
     |                   =====================                   |                                                                                                                                                                      
     |                           x T B                           |                                                                                                                                                                      
     |                   =====================                   |     
     |                         S. Grimme                         |     
     |          Mulliken Center for Theoretical Chemistry        |     
     |                    University of Bonn                     |     
      -----------------------------------------------------------      

   * xtb version 6.7.1 (edcfbbe) compiled by 'conda@c0858423619e' on 2025-09-04

normal termination of xtb
```

## 文件列表
- 01_process_mo2 : 读入配体的数据，通过mol2进行电荷合理/不合理的筛选，筛选出来的文件保存在logfile中，不合理的保存在wrong中
- 02_addchian: 读入蛋白质，计算残基的电荷，并对链进行标识符的重新分配
- 02_dump_protein:。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251018%20-dan-bai-zhi-pei-ti-xiang-hu-zuo-yong-DFT-ji-suan-bu-fen.html</guid><pubDate>Sat, 18 Oct 2025 11:24:40 +0000</pubDate></item><item><title>Linux 基础操作</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/Linux%20-ji-chu-cao-zuo.html</link><description># Linux 基础操作
##  进入命令
- cd +Tab 自动补全
- cd 后退到home
- cd .. 后退一格
- cd ../ 后退两格
- cd / 后退到根目录
- pwd 当前所处文件的绝对路径

## 展示命令
- ls 全部罗列
- ls |head 列出部分数据
- ls |head -n 100 列出100条数据
- ls |wc -l 列出文件夹中一共有多少个文件
- head -n1 .chag 显示.chag的第一行数据

## 简单计算
- total_charge=$(echo '$protein_charge+$ligand_charge'|bc) 表示浮点数运算，bc可以用来处理浮点数
- sed 可以对文本进行查找、替换、删除
- sed -i '1s/.*/$total_charge/' .chrg 在第一行进行操作 ，.*表示匹配整行 $total_charge 替换为总电荷值，.chrg表示应用在这个文件上
- 注意如果total_charge 是 -1 会报错
- 可以更换为其他分割符 sed -i '1s#.*#$total_charge# .CHRG'
```shell
    sed -i '1s#.*#$total_charge#' .CHRG # 对第一行进行整体替代
    sed -i '$s#$#$ligand_charge#' .CHRG # $匹配模式是行尾
```

## 文件操作
- pwd 输出当前的文件夹路径
- cp A B 将A 的文件复制到B 中
- cp A/* B 复制A 中的所有文件到A 中
- rm -rf data 删除文件
### 解压文件
1. tar
```shell
- tar -xzvf name.tar.gz|head-100  解压出来，看看100个
- tar -xzvf name.tar.gz 直接解压
```
2.7zip
```shell 
- sudo apt update
- sudo apt install p7zip-full #7z安装
- 7z x 01_ligand_process.7z # 解压7z文件
- 7z x 01_ligand_process.7z -o/path/to/destination # 解压到指定目录
- 7z l 01_ligand_process.7z # 列出压缩包的内容
- 7z t 01_ligand_process.7z # 测试压缩包的完整性
```
3.zip
```shell 
- zip -r data5k.zip /database 将database文件夹压缩到data5k.zip
- unzip name.zip
- unzip data.zip -d /home/user/extracted/ #解压到指定目录
- unzip -l archive.zip #查看压缩包的内容
```

- ls | head -100 | xargs -I {} cp {} /home/user/destination/ 复制100个到xargs管道中，并到文件夹 （复制文件）
- ls | head -5000 | xargs -I {} cp -r '{}' /home/dataset-assist-0/tmp/zsl/0-database 直接复制文件夹 需要-r

 - ls |head -1000|xargs -I {} cp {} /home/dataset-assist-0/tmp/zsl/GatorAffinity-DB/GatorAffinity-DB-Fixed


## 查看命令
- df -h /home/dataset 查看当前文件的磁盘容量


## 行动命令
- ctrl c 中止当前操作
- kill %1 中断当前序号为1 的项目
- kill %$(jobs -p) 中断所有的项目
- ctrl z 暂停当前操作

## 基础函数操作
- echo 'my script begin to run!' # 打印函数
- python 命令行输入：
```powershell
local pdbid=$1 #读取命令行输入，注意没有空格
python myscrip.py\
--ligandfile '$ligandfile'\
``` 
- python 的引用
python 同文件夹下的.py
python \home\tmp\zsl\全文件下的.py

ls | head -5000 | while read -r item; do
    cp -r '$item' /home/dataset-assist-0/tmp/zsl/0-database
done

## 调用函数的方式
- 定义函数：01_ligand_process() { } # 大括号前需要空格
- chmod +x your_script.sh #给脚本增加权限
- ./your_script.sh # 直接运行
- cat 01_ligand_data.txt | parallel --joblog 02.log --retries 3 --jobs 16 01_ligand_process {} # 最后面的大括号前面需要空格
- base_directory=$(pwd)
# 基本配置
- 安装GNU parallel
sudo apt-get install parallel  # Ubuntu/Debian
- 安装文件转化
sudo apt install dos2unix
dos2unix mydoc.txt
## 单文件txt操作
- cp 01_ligand_data.txt 01_ligand_data.txt.backup #备份原文件
- sed -i 's/[[:space:]]//g' 01_ligand_data.txt # 移除所有空白字符（空格、制表符）
- cat 01_ligand_data.txt | head -10 #列出来清理之后的操作。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/Linux%20-ji-chu-cao-zuo.html</guid><pubDate>Fri, 17 Oct 2025 17:35:55 +0000</pubDate></item><item><title>20251017 《现代软件工程》课程 个人博客作业 1——就《现代软件工程》提 5 个问题</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251017%20%E3%80%8A-xian-dai-ruan-jian-gong-cheng-%E3%80%8B-ke-cheng-%20-ge-ren-bo-ke-zuo-ye-%201%E2%80%94%E2%80%94-jiu-%E3%80%8A-xian-dai-ruan-jian-gong-cheng-%E3%80%8B-ti-%205%20-ge-wen-ti.html</link><description>Part B｜快速通读《构建之法》后的五个问题
说明：每个问题均包含“问题陈述｜触发出处｜我们查的资料(显然,这里有LLM辅助写作)｜LLM提出并建议我实践的计划｜未解之惑/待验证”，并尽量给出可复用的评估维度或实验设计思路。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251017%20%E3%80%8A-xian-dai-ruan-jian-gong-cheng-%E3%80%8B-ke-cheng-%20-ge-ren-bo-ke-zuo-ye-%201%E2%80%94%E2%80%94-jiu-%E3%80%8A-xian-dai-ruan-jian-gong-cheng-%E3%80%8B-ti-%205%20-ge-wen-ti.html</guid><pubDate>Fri, 17 Oct 2025 14:35:39 +0000</pubDate></item><item><title>20251017 博客测试</title><link>https://blackcatontree.github.io/zhoushilei.github.io/post/20251017%20-bo-ke-ce-shi.html</link><description>Hello world。</description><guid isPermaLink="true">https://blackcatontree.github.io/zhoushilei.github.io/post/20251017%20-bo-ke-ce-shi.html</guid><pubDate>Fri, 17 Oct 2025 14:27:05 +0000</pubDate></item></channel></rss>